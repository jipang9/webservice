{{>layout/header}}
    <h1>스프링 부트로 시작하는 웹 서비스</h1>
    <div class="col-md-12">
        <div class="row">
            <div class="col-md-6">
                <a href="posts/save" role="button" class="btn btn-primary">글등록</a> <!--이동할 페이지 주소 : posts/save-->
                {{#userName}}
                    Logged in as: <span id="user">{{userName}}</span>
                    <a href="/logout" class="btn btn-info active" role="button">Logout</a>
                {{/userName}}
                {{^userName}}
                    <a href="/oauth2/authorization/google" class="btn btn-success active" role="button">Google Login</a>
                    <a href="/oauth2/authorization/naver" class="btn btn-secondary active" role="button">Naver Login</a>
                {{/userName}}
            </div>
        </div>
        <br>
        <!--목록 출력 영역-->
        <table class="table table-horizontal table-bordered">
            <thead class ="thead-strong">
            <tr>
                <th>게시글번호</th>
                <th>제목</th>
                <th>작성자</th>
                <th>최종수정일</th>
            </tr>
            </thead>
            <tbody id="tbody">
            {{#posts}}
                <tr>
                    <td>{{id}}</td>
                    <td><a href="/posts/update/{{id}}">{{title}}</a></td>
                    <td>{{author}}</td>
                    <td>{{modifiedDate}}</td>
                </tr>
            {{/posts}}
            </tbody>
        </table>
    </div>
{{>layout/footer}}

<!--
        프론트 라이브러리를 사용할 수 있는 방법은 다양하다.
            1. 외부 CDN을 이용하는 방법 (이 방법이 뭐지?)
                = 우선 실제 서비스에서 잘 사용하지 않는다. 그 이유는 외부 서비스에 해당 서비스가 의존을 하게되서
                  CDN을 서비스 하는 곳에 문제가 생기면 같이 문제가 생기기 때문이다.
                = CDN은 (Content Delivery NetWork)의 약자로 지리적 제약 없이 전 세계의 사용자에게 빠르게 컨텐츠를 전송하는 기술
                  (전송 속도가 빠르다는 장점이 있을듯?)
            2. 직접 라이브러리를 받아서 사용하는 방법
            -- 해당 서비스에서는 부트스트랩과 JQuery를 mustache에 추가해야 하는데, 바로 추가하지 않고 레이아웃 방식으로 추가
            -- 레이아웃 방식은 공통 영역을 별도의 파일로 분리해 필요한 곳에서 가져다 쓰는 방식을 이야기 함.

            -- 해당 서비스에서는 css와 js의 위치가 서로 다른데, 그 이유는 페이지 로딩 속도를 높이기 위해서라고 한다. ( 처음 알게된 사실 )
            -- css 는 header에, js는 footer에 위치해 있는데, HTML은 위에서 코드가 실행되 head가 다 실행되고 body가 실행된다.
            -- (보통 js는 기능을 위해 사용하기에, 우선 이미지(css)를 먼저 다 호출한 후, 기능(js)을 호출하는 것이 좋다)

            -- bootstrap.js의 경우 제이쿼리가 꼭 있어먄 해 부트스트랩보다 먼저 호출되도록 코드를 작성함.
                이러한 상황을 bootstrap.js가 제이쿼리에 의존한다고 함.
            -- 결국 기존에 책에서 사용했던 코드가 기타 태그들이 모두 레이아웃에 추가되니 index 파일에는 진짜 필요한 코드만 남게됨.
-->



